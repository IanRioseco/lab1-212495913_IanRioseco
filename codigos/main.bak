#lang racket
(require "TDAplayer.rkt")
(require "TDAboard.rkt")
(require "TDAsePuedeJugar.rkt")
;funcion para actualizar las victorias del jugador
;La función increment-player-wins toma un jugador (una lista que representa sus datos) y devuelve una nueva lista donde el número de victorias del jugador ha sido incrementado en 1
;DOM: playerXincremento de victorias
;REC:player
(define increment-player-wins
  (lambda (player)
    (list (get-player-id player)             
          (get-player-name player)           
          (get-player-color player)          
          (+ 1 (get-player-wins player))     
          (get-player-losses player)         
          (get-player-draws player)          
          (get-player-remaining-pieces player))))

;Funcion Para Aumentar las derrotas
(define increment-player-losses
  (lambda (player)
    (list (get-player-id player)             
          (get-player-name player)           
          (get-player-color player)          
          (get-player-wins player)    
          (+ 1(get-player-losses player))         
          (get-player-draws player)          
          (get-player-remaining-pieces player))))

;Funcion para aumentar los empates
(define increment-player-draw
  (lambda (player)
    (list (get-player-id player)             
          (get-player-name player)           
          (get-player-color player)          
          (get-player-wins player)   
          (get-player-losses player)         
          (+ 1(get-player-draws player))          
          (get-player-remaining-pieces player))))


;funcion para disminuir el numero de fichas
(define decrease-player-pieces
  (lambda (player)
    (list (get-player-id player)             
          (get-player-name player)           
          (get-player-color player)          
          (get-player-wins player)    
          (get-player-losses player)       
          (get-player-draws player)          
          (- (get-player-remaining-pieces player) 1))))



;; Definimos un jugador inicial
(define jugador (player 1 "Ian" "rojo" 2 1 0 21))  ; Jugador inicial con 21 piezas

;; Llamamos a la función para decrementar las piezas
(define jugador-actualizado (decrease-player-pieces jugador))
(define jugador-actualizado1 (increment-player-losses jugador))
(define jugador-actualizado2 (increment-player-draw jugador))

;; Mostrar resultados
(display "Jugador actualizado: ")
(display jugador-actualizado)  ; Muestra la lista completa del jugador actualizado
(newline)
(display jugador-actualizado1)
(newline)
(display jugador-actualizado2)
(newline)

(display "Piezas restantes actualizadas: ")
(display (get-player-remaining-pieces jugador-actualizado))  ; Muestra las piezas restantes
(newline)
